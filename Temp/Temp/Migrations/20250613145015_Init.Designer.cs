// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Temp.Data;

#nullable disable

namespace Temp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250613145015_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Temp.Models.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArtistId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ArtistId");

                    b.ToTable("Artist");

                    b.HasData(
                        new
                        {
                            ArtistId = 1,
                            BirthDate = new DateTime(1881, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Pablo",
                            LastName = "Picasso"
                        },
                        new
                        {
                            ArtistId = 2,
                            BirthDate = new DateTime(1907, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Frida",
                            LastName = "Kahlo"
                        });
                });

            modelBuilder.Entity("Temp.Models.Artwork", b =>
                {
                    b.Property<int>("ArtworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArtworkId"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("YearCreated")
                        .HasColumnType("int");

                    b.HasKey("ArtworkId");

                    b.HasIndex("ArtistId");

                    b.ToTable("Artwork");

                    b.HasData(
                        new
                        {
                            ArtworkId = 1,
                            ArtistId = 1,
                            Title = "Les Demoiselles d'Avignon",
                            YearCreated = 1907
                        },
                        new
                        {
                            ArtworkId = 2,
                            ArtistId = 2,
                            Title = "The Two Fridas",
                            YearCreated = 1939
                        });
                });

            modelBuilder.Entity("Temp.Models.Exhibition", b =>
                {
                    b.Property<int>("ExhibitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExhibitionId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GalleryId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfArtworks")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ExhibitionId");

                    b.HasIndex("GalleryId");

                    b.ToTable("Exhibition");

                    b.HasData(
                        new
                        {
                            ExhibitionId = 1,
                            EndDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GalleryId = 1,
                            NumberOfArtworks = 2,
                            StartDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Masterpieces of the 20th Century"
                        });
                });

            modelBuilder.Entity("Temp.Models.ExhibitionArtwork", b =>
                {
                    b.Property<int>("ExhibitionId")
                        .HasColumnType("int");

                    b.Property<int>("ArtworkId")
                        .HasColumnType("int");

                    b.Property<decimal>("InsuranceValue")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ExhibitionId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("Exhibition_Artwork");

                    b.HasData(
                        new
                        {
                            ExhibitionId = 1,
                            ArtworkId = 1,
                            InsuranceValue = 1500000m
                        },
                        new
                        {
                            ExhibitionId = 1,
                            ArtworkId = 2,
                            InsuranceValue = 1300000m
                        });
                });

            modelBuilder.Entity("Temp.Models.Gallery", b =>
                {
                    b.Property<int>("GalleryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GalleryId"));

                    b.Property<DateTime>("EstablishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GalleryId");

                    b.ToTable("Gallery");

                    b.HasData(
                        new
                        {
                            GalleryId = 1,
                            EstablishedDate = new DateTime(2000, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Modern Art Gallery"
                        },
                        new
                        {
                            GalleryId = 2,
                            EstablishedDate = new DateTime(2001, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Modern Art Space"
                        });
                });

            modelBuilder.Entity("Temp.Models.Artwork", b =>
                {
                    b.HasOne("Temp.Models.Artist", "Artist")
                        .WithMany("Artworks")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Temp.Models.Exhibition", b =>
                {
                    b.HasOne("Temp.Models.Gallery", "Gallery")
                        .WithMany("Exhibitions")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");
                });

            modelBuilder.Entity("Temp.Models.ExhibitionArtwork", b =>
                {
                    b.HasOne("Temp.Models.Artwork", "Artwork")
                        .WithMany("ExhibitionArtworks")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Temp.Models.Exhibition", "Exhibition")
                        .WithMany("ExhibitionArtworks")
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Exhibition");
                });

            modelBuilder.Entity("Temp.Models.Artist", b =>
                {
                    b.Navigation("Artworks");
                });

            modelBuilder.Entity("Temp.Models.Artwork", b =>
                {
                    b.Navigation("ExhibitionArtworks");
                });

            modelBuilder.Entity("Temp.Models.Exhibition", b =>
                {
                    b.Navigation("ExhibitionArtworks");
                });

            modelBuilder.Entity("Temp.Models.Gallery", b =>
                {
                    b.Navigation("Exhibitions");
                });
#pragma warning restore 612, 618
        }
    }
}
